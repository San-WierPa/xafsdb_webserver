# coding: utf-8

"""
    Dacat API

    SciCat backend API  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from scicat_py.configuration import Configuration


class Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email_job_initiator': 'str',
        'type': 'str',
        'creation_time': 'datetime',
        'execution_time': 'datetime',
        'job_params': 'object',
        'job_status_message': 'str',
        'dataset_list': 'list[str]',
        'job_result_object': 'object'
    }

    attribute_map = {
        'email_job_initiator': 'emailJobInitiator',
        'type': 'type',
        'creation_time': 'creationTime',
        'execution_time': 'executionTime',
        'job_params': 'jobParams',
        'job_status_message': 'jobStatusMessage',
        'dataset_list': 'datasetList',
        'job_result_object': 'jobResultObject'
    }

    def __init__(self, email_job_initiator=None, type=None, creation_time=None, execution_time=None, job_params=None, job_status_message=None, dataset_list=None, job_result_object=None, local_vars_configuration=None):  # noqa: E501
        """Job - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email_job_initiator = None
        self._type = None
        self._creation_time = None
        self._execution_time = None
        self._job_params = None
        self._job_status_message = None
        self._dataset_list = None
        self._job_result_object = None
        self.discriminator = None

        self.email_job_initiator = email_job_initiator
        self.type = type
        self.creation_time = creation_time
        self.execution_time = execution_time
        self.job_params = job_params
        self.job_status_message = job_status_message
        self.dataset_list = dataset_list
        self.job_result_object = job_result_object

    @property
    def email_job_initiator(self):
        """Gets the email_job_initiator of this Job.  # noqa: E501

        The email of the person initiating the job request  # noqa: E501

        :return: The email_job_initiator of this Job.  # noqa: E501
        :rtype: str
        """
        return self._email_job_initiator

    @email_job_initiator.setter
    def email_job_initiator(self, email_job_initiator):
        """Sets the email_job_initiator of this Job.

        The email of the person initiating the job request  # noqa: E501

        :param email_job_initiator: The email_job_initiator of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email_job_initiator is None:  # noqa: E501
            raise ValueError("Invalid value for `email_job_initiator`, must not be `None`")  # noqa: E501

        self._email_job_initiator = email_job_initiator

    @property
    def type(self):
        """Gets the type of this Job.  # noqa: E501

        Type of job, e.g. archive, retrieve etc  # noqa: E501

        :return: The type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Job.

        Type of job, e.g. archive, retrieve etc  # noqa: E501

        :param type: The type of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def creation_time(self):
        """Gets the creation_time of this Job.  # noqa: E501

        Time when job is created. Format according to chapter 5.6 internet date/time format in RFC 3339  # noqa: E501

        :return: The creation_time of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Job.

        Time when job is created. Format according to chapter 5.6 internet date/time format in RFC 3339  # noqa: E501

        :param creation_time: The creation_time of this Job.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_time is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def execution_time(self):
        """Gets the execution_time of this Job.  # noqa: E501

        Time when job should be executed. If not specified then the Job will be executed asap. Format according to chapter 5.6 internet date/time format in RFC 3339  # noqa: E501

        :return: The execution_time of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """Sets the execution_time of this Job.

        Time when job should be executed. If not specified then the Job will be executed asap. Format according to chapter 5.6 internet date/time format in RFC 3339  # noqa: E501

        :param execution_time: The execution_time of this Job.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and execution_time is None:  # noqa: E501
            raise ValueError("Invalid value for `execution_time`, must not be `None`")  # noqa: E501

        self._execution_time = execution_time

    @property
    def job_params(self):
        """Gets the job_params of this Job.  # noqa: E501

        Object of key-value pairs defining job input parameters, e.g. 'desinationPath' for retrieve jobs or 'tapeCopies' for archive jobs  # noqa: E501

        :return: The job_params of this Job.  # noqa: E501
        :rtype: object
        """
        return self._job_params

    @job_params.setter
    def job_params(self, job_params):
        """Sets the job_params of this Job.

        Object of key-value pairs defining job input parameters, e.g. 'desinationPath' for retrieve jobs or 'tapeCopies' for archive jobs  # noqa: E501

        :param job_params: The job_params of this Job.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and job_params is None:  # noqa: E501
            raise ValueError("Invalid value for `job_params`, must not be `None`")  # noqa: E501

        self._job_params = job_params

    @property
    def job_status_message(self):
        """Gets the job_status_message of this Job.  # noqa: E501

        Defines current status of job lifecycle  # noqa: E501

        :return: The job_status_message of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_status_message

    @job_status_message.setter
    def job_status_message(self, job_status_message):
        """Sets the job_status_message of this Job.

        Defines current status of job lifecycle  # noqa: E501

        :param job_status_message: The job_status_message of this Job.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and job_status_message is None:  # noqa: E501
            raise ValueError("Invalid value for `job_status_message`, must not be `None`")  # noqa: E501

        self._job_status_message = job_status_message

    @property
    def dataset_list(self):
        """Gets the dataset_list of this Job.  # noqa: E501

        Array of objects with keys: pid, files. The value for the pid key defines the dataset ID, the value for the files key is an array of file names. This array is either an empty array, implying that all files within the dataset are selected or an explicit list of dataset-relative file paths, which should be selected  # noqa: E501

        :return: The dataset_list of this Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._dataset_list

    @dataset_list.setter
    def dataset_list(self, dataset_list):
        """Sets the dataset_list of this Job.

        Array of objects with keys: pid, files. The value for the pid key defines the dataset ID, the value for the files key is an array of file names. This array is either an empty array, implying that all files within the dataset are selected or an explicit list of dataset-relative file paths, which should be selected  # noqa: E501

        :param dataset_list: The dataset_list of this Job.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and dataset_list is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_list`, must not be `None`")  # noqa: E501

        self._dataset_list = dataset_list

    @property
    def job_result_object(self):
        """Gets the job_result_object of this Job.  # noqa: E501

        Detailed return value after job is finished  # noqa: E501

        :return: The job_result_object of this Job.  # noqa: E501
        :rtype: object
        """
        return self._job_result_object

    @job_result_object.setter
    def job_result_object(self, job_result_object):
        """Sets the job_result_object of this Job.

        Detailed return value after job is finished  # noqa: E501

        :param job_result_object: The job_result_object of this Job.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and job_result_object is None:  # noqa: E501
            raise ValueError("Invalid value for `job_result_object`, must not be `None`")  # noqa: E501

        self._job_result_object = job_result_object

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Job):
            return True

        return self.to_dict() != other.to_dict()
