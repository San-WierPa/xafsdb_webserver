# coding: utf-8

"""
    Dacat API

    SciCat backend API  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from scicat_py.configuration import Configuration


class UserSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'columns': 'list[object]',
        'dataset_count': 'float',
        'job_count': 'float',
        'user_id': 'str'
    }

    attribute_map = {
        'columns': 'columns',
        'dataset_count': 'datasetCount',
        'job_count': 'jobCount',
        'user_id': 'userId'
    }

    def __init__(self, columns=[], dataset_count=25, job_count=25, user_id=None, local_vars_configuration=None):  # noqa: E501
        """UserSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._columns = None
        self._dataset_count = None
        self._job_count = None
        self._user_id = None
        self.discriminator = None

        self.columns = columns
        self.dataset_count = dataset_count
        self.job_count = job_count
        self.user_id = user_id

    @property
    def columns(self):
        """Gets the columns of this UserSettings.  # noqa: E501

        Array of the users preferred columns in dataset table  # noqa: E501

        :return: The columns of this UserSettings.  # noqa: E501
        :rtype: list[object]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this UserSettings.

        Array of the users preferred columns in dataset table  # noqa: E501

        :param columns: The columns of this UserSettings.  # noqa: E501
        :type: list[object]
        """
        if self.local_vars_configuration.client_side_validation and columns is None:  # noqa: E501
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def dataset_count(self):
        """Gets the dataset_count of this UserSettings.  # noqa: E501

        The users preferred number of datasets to view per page  # noqa: E501

        :return: The dataset_count of this UserSettings.  # noqa: E501
        :rtype: float
        """
        return self._dataset_count

    @dataset_count.setter
    def dataset_count(self, dataset_count):
        """Sets the dataset_count of this UserSettings.

        The users preferred number of datasets to view per page  # noqa: E501

        :param dataset_count: The dataset_count of this UserSettings.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and dataset_count is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_count`, must not be `None`")  # noqa: E501

        self._dataset_count = dataset_count

    @property
    def job_count(self):
        """Gets the job_count of this UserSettings.  # noqa: E501

        The users preferred number of jobs to view per page  # noqa: E501

        :return: The job_count of this UserSettings.  # noqa: E501
        :rtype: float
        """
        return self._job_count

    @job_count.setter
    def job_count(self, job_count):
        """Sets the job_count of this UserSettings.

        The users preferred number of jobs to view per page  # noqa: E501

        :param job_count: The job_count of this UserSettings.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and job_count is None:  # noqa: E501
            raise ValueError("Invalid value for `job_count`, must not be `None`")  # noqa: E501

        self._job_count = job_count

    @property
    def user_id(self):
        """Gets the user_id of this UserSettings.  # noqa: E501


        :return: The user_id of this UserSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserSettings.


        :param user_id: The user_id of this UserSettings.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSettings):
            return True

        return self.to_dict() != other.to_dict()
