# coding: utf-8

"""
    Dacat API

    SciCat backend API  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from scicat_py.configuration import Configuration


class MeasurementPeriod(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instrument': 'str',
        'start': 'datetime',
        'end': 'datetime',
        'comment': 'str'
    }

    attribute_map = {
        'instrument': 'instrument',
        'start': 'start',
        'end': 'end',
        'comment': 'comment'
    }

    def __init__(self, instrument=None, start=None, end=None, comment=None, local_vars_configuration=None):  # noqa: E501
        """MeasurementPeriod - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instrument = None
        self._start = None
        self._end = None
        self._comment = None
        self.discriminator = None

        self.instrument = instrument
        self.start = start
        self.end = end
        self.comment = comment

    @property
    def instrument(self):
        """Gets the instrument of this MeasurementPeriod.  # noqa: E501

        Instrument or beamline identifier where measurement was pursued, e.g. /PSI/SLS/TOMCAT  # noqa: E501

        :return: The instrument of this MeasurementPeriod.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this MeasurementPeriod.

        Instrument or beamline identifier where measurement was pursued, e.g. /PSI/SLS/TOMCAT  # noqa: E501

        :param instrument: The instrument of this MeasurementPeriod.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and instrument is None:  # noqa: E501
            raise ValueError("Invalid value for `instrument`, must not be `None`")  # noqa: E501

        self._instrument = instrument

    @property
    def start(self):
        """Gets the start of this MeasurementPeriod.  # noqa: E501

        Time when measurement period started, format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server  # noqa: E501

        :return: The start of this MeasurementPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this MeasurementPeriod.

        Time when measurement period started, format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server  # noqa: E501

        :param start: The start of this MeasurementPeriod.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and start is None:  # noqa: E501
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this MeasurementPeriod.  # noqa: E501

        Time when measurement period ended, format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server  # noqa: E501

        :return: The end of this MeasurementPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this MeasurementPeriod.

        Time when measurement period ended, format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server  # noqa: E501

        :param end: The end of this MeasurementPeriod.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and end is None:  # noqa: E501
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def comment(self):
        """Gets the comment of this MeasurementPeriod.  # noqa: E501

        Additional information relevant for this measurement period, e.g. if different accounts were used for data taking  # noqa: E501

        :return: The comment of this MeasurementPeriod.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MeasurementPeriod.

        Additional information relevant for this measurement period, e.g. if different accounts were used for data taking  # noqa: E501

        :param comment: The comment of this MeasurementPeriod.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and comment is None:  # noqa: E501
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeasurementPeriod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MeasurementPeriod):
            return True

        return self.to_dict() != other.to_dict()
