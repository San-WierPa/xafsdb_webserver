# coding: utf-8

"""
    Dacat API

    SciCat backend API  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from scicat_py.configuration import Configuration


class Sample(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'owner_group': 'str',
        'access_groups': 'list[str]',
        'instrument_group': 'str',
        'created_by': 'str',
        'updated_by': 'str',
        'sample_id': 'str',
        'owner': 'str',
        'description': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'sample_characteristics': 'object',
        'is_published': 'bool',
        'attachments': 'list[Attachment]',
        'datasets': 'list[Dataset]'
    }

    attribute_map = {
        'owner_group': 'ownerGroup',
        'access_groups': 'accessGroups',
        'instrument_group': 'instrumentGroup',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'sample_id': 'sampleId',
        'owner': 'owner',
        'description': 'description',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'sample_characteristics': 'sampleCharacteristics',
        'is_published': 'isPublished',
        'attachments': 'attachments',
        'datasets': 'datasets'
    }

    def __init__(self, owner_group=None, access_groups=None, instrument_group=None, created_by=None, updated_by=None, sample_id=None, owner=None, description=None, created_at=None, updated_at=None, sample_characteristics=None, is_published=False, attachments=None, datasets=None, local_vars_configuration=None):  # noqa: E501
        """Sample - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._owner_group = None
        self._access_groups = None
        self._instrument_group = None
        self._created_by = None
        self._updated_by = None
        self._sample_id = None
        self._owner = None
        self._description = None
        self._created_at = None
        self._updated_at = None
        self._sample_characteristics = None
        self._is_published = None
        self._attachments = None
        self._datasets = None
        self.discriminator = None

        self.owner_group = owner_group
        self.access_groups = access_groups
        if instrument_group is not None:
            self.instrument_group = instrument_group
        self.created_by = created_by
        self.updated_by = updated_by
        self.sample_id = sample_id
        self.owner = owner
        self.description = description
        self.created_at = created_at
        self.updated_at = updated_at
        self.sample_characteristics = sample_characteristics
        self.is_published = is_published
        self.attachments = attachments
        self.datasets = datasets

    @property
    def owner_group(self):
        """Gets the owner_group of this Sample.  # noqa: E501

        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151  # noqa: E501

        :return: The owner_group of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._owner_group

    @owner_group.setter
    def owner_group(self, owner_group):
        """Sets the owner_group of this Sample.

        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151  # noqa: E501

        :param owner_group: The owner_group of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and owner_group is None:  # noqa: E501
            raise ValueError("Invalid value for `owner_group`, must not be `None`")  # noqa: E501

        self._owner_group = owner_group

    @property
    def access_groups(self):
        """Gets the access_groups of this Sample.  # noqa: E501

        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users  # noqa: E501

        :return: The access_groups of this Sample.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_groups

    @access_groups.setter
    def access_groups(self, access_groups):
        """Sets the access_groups of this Sample.

        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users  # noqa: E501

        :param access_groups: The access_groups of this Sample.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and access_groups is None:  # noqa: E501
            raise ValueError("Invalid value for `access_groups`, must not be `None`")  # noqa: E501

        self._access_groups = access_groups

    @property
    def instrument_group(self):
        """Gets the instrument_group of this Sample.  # noqa: E501

        Optional additional groups which have read and write access to the data. Users which are member in one of the groups listed here are allowed to access this data.  # noqa: E501

        :return: The instrument_group of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._instrument_group

    @instrument_group.setter
    def instrument_group(self, instrument_group):
        """Sets the instrument_group of this Sample.

        Optional additional groups which have read and write access to the data. Users which are member in one of the groups listed here are allowed to access this data.  # noqa: E501

        :param instrument_group: The instrument_group of this Sample.  # noqa: E501
        :type: str
        """

        self._instrument_group = instrument_group

    @property
    def created_by(self):
        """Gets the created_by of this Sample.  # noqa: E501


        :return: The created_by of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Sample.


        :param created_by: The created_by of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this Sample.  # noqa: E501


        :return: The updated_by of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Sample.


        :param updated_by: The updated_by of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    @property
    def sample_id(self):
        """Gets the sample_id of this Sample.  # noqa: E501


        :return: The sample_id of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this Sample.


        :param sample_id: The sample_id of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sample_id is None:  # noqa: E501
            raise ValueError("Invalid value for `sample_id`, must not be `None`")  # noqa: E501

        self._sample_id = sample_id

    @property
    def owner(self):
        """Gets the owner of this Sample.  # noqa: E501

        The owner of the sample  # noqa: E501

        :return: The owner of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Sample.

        The owner of the sample  # noqa: E501

        :param owner: The owner of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and owner is None:  # noqa: E501
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def description(self):
        """Gets the description of this Sample.  # noqa: E501

        A description of the sample  # noqa: E501

        :return: The description of this Sample.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Sample.

        A description of the sample  # noqa: E501

        :param description: The description of this Sample.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this Sample.  # noqa: E501

        Date when the sample was created  # noqa: E501

        :return: The created_at of this Sample.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Sample.

        Date when the sample was created  # noqa: E501

        :param created_at: The created_at of this Sample.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Sample.  # noqa: E501

        Date when the sample was last modified  # noqa: E501

        :return: The updated_at of this Sample.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Sample.

        Date when the sample was last modified  # noqa: E501

        :param updated_at: The updated_at of this Sample.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def sample_characteristics(self):
        """Gets the sample_characteristics of this Sample.  # noqa: E501

        JSON object containing the sample characteristics metadata  # noqa: E501

        :return: The sample_characteristics of this Sample.  # noqa: E501
        :rtype: object
        """
        return self._sample_characteristics

    @sample_characteristics.setter
    def sample_characteristics(self, sample_characteristics):
        """Sets the sample_characteristics of this Sample.

        JSON object containing the sample characteristics metadata  # noqa: E501

        :param sample_characteristics: The sample_characteristics of this Sample.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and sample_characteristics is None:  # noqa: E501
            raise ValueError("Invalid value for `sample_characteristics`, must not be `None`")  # noqa: E501

        self._sample_characteristics = sample_characteristics

    @property
    def is_published(self):
        """Gets the is_published of this Sample.  # noqa: E501

        Flag is true when data are made publically available  # noqa: E501

        :return: The is_published of this Sample.  # noqa: E501
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this Sample.

        Flag is true when data are made publically available  # noqa: E501

        :param is_published: The is_published of this Sample.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_published is None:  # noqa: E501
            raise ValueError("Invalid value for `is_published`, must not be `None`")  # noqa: E501

        self._is_published = is_published

    @property
    def attachments(self):
        """Gets the attachments of this Sample.  # noqa: E501


        :return: The attachments of this Sample.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Sample.


        :param attachments: The attachments of this Sample.  # noqa: E501
        :type: list[Attachment]
        """
        if self.local_vars_configuration.client_side_validation and attachments is None:  # noqa: E501
            raise ValueError("Invalid value for `attachments`, must not be `None`")  # noqa: E501

        self._attachments = attachments

    @property
    def datasets(self):
        """Gets the datasets of this Sample.  # noqa: E501


        :return: The datasets of this Sample.  # noqa: E501
        :rtype: list[Dataset]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this Sample.


        :param datasets: The datasets of this Sample.  # noqa: E501
        :type: list[Dataset]
        """
        if self.local_vars_configuration.client_side_validation and datasets is None:  # noqa: E501
            raise ValueError("Invalid value for `datasets`, must not be `None`")  # noqa: E501

        self._datasets = datasets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sample):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Sample):
            return True

        return self.to_dict() != other.to_dict()
