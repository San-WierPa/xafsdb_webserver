# coding: utf-8

"""
    Dacat API

    SciCat backend API  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from scicat_py.configuration import Configuration


class Lifecycle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "archivable": "bool",
        "retrievable": "bool",
        "publishable": "bool",
        "date_of_disk_purging": "datetime",
        "archive_retention_time": "datetime",
        "date_of_publishing": "datetime",
        "published_on": "datetime",
        "is_on_central_disk": "bool",
        "archive_status_message": "str",
        "retrieve_status_message": "str",
        "archive_return_message": "object",
        "retrieve_return_message": "object",
        "exported_to": "str",
        "retrieve_integrity_check": "bool",
    }

    attribute_map = {
        "archivable": "archivable",
        "retrievable": "retrievable",
        "publishable": "publishable",
        "date_of_disk_purging": "dateOfDiskPurging",
        "archive_retention_time": "archiveRetentionTime",
        "date_of_publishing": "dateOfPublishing",
        "published_on": "publishedOn",
        "is_on_central_disk": "isOnCentralDisk",
        "archive_status_message": "archiveStatusMessage",
        "retrieve_status_message": "retrieveStatusMessage",
        "archive_return_message": "archiveReturnMessage",
        "retrieve_return_message": "retrieveReturnMessage",
        "exported_to": "exportedTo",
        "retrieve_integrity_check": "retrieveIntegrityCheck",
    }

    def __init__(
        self,
        archivable=None,
        retrievable=None,
        publishable=None,
        date_of_disk_purging=None,
        archive_retention_time=None,
        date_of_publishing=None,
        published_on=None,
        is_on_central_disk=None,
        archive_status_message=None,
        retrieve_status_message=None,
        archive_return_message=None,
        retrieve_return_message=None,
        exported_to=None,
        retrieve_integrity_check=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Lifecycle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._archivable = None
        self._retrievable = None
        self._publishable = None
        self._date_of_disk_purging = None
        self._archive_retention_time = None
        self._date_of_publishing = None
        self._published_on = None
        self._is_on_central_disk = None
        self._archive_status_message = None
        self._retrieve_status_message = None
        self._archive_return_message = None
        self._retrieve_return_message = None
        self._exported_to = None
        self._retrieve_integrity_check = None
        self.discriminator = None

        if archivable is not None:
            self.archivable = archivable
        if retrievable is not None:
            self.retrievable = retrievable
        if publishable is not None:
            self.publishable = publishable
        if date_of_disk_purging is not None:
            self.date_of_disk_purging = date_of_disk_purging
        if archive_retention_time is not None:
            self.archive_retention_time = archive_retention_time
        if date_of_publishing is not None:
            self.date_of_publishing = date_of_publishing
        if published_on is not None:
            self.published_on = published_on
        if is_on_central_disk is not None:
            self.is_on_central_disk = is_on_central_disk
        if archive_status_message is not None:
            self.archive_status_message = archive_status_message
        if retrieve_status_message is not None:
            self.retrieve_status_message = retrieve_status_message
        if archive_return_message is not None:
            self.archive_return_message = archive_return_message
        if retrieve_return_message is not None:
            self.retrieve_return_message = retrieve_return_message
        if exported_to is not None:
            self.exported_to = exported_to
        if retrieve_integrity_check is not None:
            self.retrieve_integrity_check = retrieve_integrity_check

    @property
    def archivable(self):
        """Gets the archivable of this Lifecycle.  # noqa: E501

        Flag which is true, if dataset is available to be archived and no archive job for this dataset exists yet.  # noqa: E501

        :return: The archivable of this Lifecycle.  # noqa: E501
        :rtype: bool
        """
        return self._archivable

    @archivable.setter
    def archivable(self, archivable):
        """Sets the archivable of this Lifecycle.

        Flag which is true, if dataset is available to be archived and no archive job for this dataset exists yet.  # noqa: E501

        :param archivable: The archivable of this Lifecycle.  # noqa: E501
        :type: bool
        """

        self._archivable = archivable

    @property
    def retrievable(self):
        """Gets the retrievable of this Lifecycle.  # noqa: E501

        Flag which is true, if dataset is stored on archive system and is ready to be retrieved.  # noqa: E501

        :return: The retrievable of this Lifecycle.  # noqa: E501
        :rtype: bool
        """
        return self._retrievable

    @retrievable.setter
    def retrievable(self, retrievable):
        """Sets the retrievable of this Lifecycle.

        Flag which is true, if dataset is stored on archive system and is ready to be retrieved.  # noqa: E501

        :param retrievable: The retrievable of this Lifecycle.  # noqa: E501
        :type: bool
        """

        self._retrievable = retrievable

    @property
    def publishable(self):
        """Gets the publishable of this Lifecycle.  # noqa: E501

        Flag which is true, if dataset can be published. Usually requires a longterm storage option on tape or similar.  # noqa: E501

        :return: The publishable of this Lifecycle.  # noqa: E501
        :rtype: bool
        """
        return self._publishable

    @publishable.setter
    def publishable(self, publishable):
        """Sets the publishable of this Lifecycle.

        Flag which is true, if dataset can be published. Usually requires a longterm storage option on tape or similar.  # noqa: E501

        :param publishable: The publishable of this Lifecycle.  # noqa: E501
        :type: bool
        """

        self._publishable = publishable

    @property
    def date_of_disk_purging(self):
        """Gets the date_of_disk_purging of this Lifecycle.  # noqa: E501

        Day when dataset will be removed from disk, assuming that is already stored on tape.  # noqa: E501

        :return: The date_of_disk_purging of this Lifecycle.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_disk_purging

    @date_of_disk_purging.setter
    def date_of_disk_purging(self, date_of_disk_purging):
        """Sets the date_of_disk_purging of this Lifecycle.

        Day when dataset will be removed from disk, assuming that is already stored on tape.  # noqa: E501

        :param date_of_disk_purging: The date_of_disk_purging of this Lifecycle.  # noqa: E501
        :type: datetime
        """

        self._date_of_disk_purging = date_of_disk_purging

    @property
    def archive_retention_time(self):
        """Gets the archive_retention_time of this Lifecycle.  # noqa: E501

        Day when the dataset's future fate will be evaluated again, e.g. to decide if the dataset can be deleted from archive.  # noqa: E501

        :return: The archive_retention_time of this Lifecycle.  # noqa: E501
        :rtype: datetime
        """
        return self._archive_retention_time

    @archive_retention_time.setter
    def archive_retention_time(self, archive_retention_time):
        """Sets the archive_retention_time of this Lifecycle.

        Day when the dataset's future fate will be evaluated again, e.g. to decide if the dataset can be deleted from archive.  # noqa: E501

        :param archive_retention_time: The archive_retention_time of this Lifecycle.  # noqa: E501
        :type: datetime
        """

        self._archive_retention_time = archive_retention_time

    @property
    def date_of_publishing(self):
        """Gets the date_of_publishing of this Lifecycle.  # noqa: E501

        Day when dataset is supposed to become public according to data policy  # noqa: E501

        :return: The date_of_publishing of this Lifecycle.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_publishing

    @date_of_publishing.setter
    def date_of_publishing(self, date_of_publishing):
        """Sets the date_of_publishing of this Lifecycle.

        Day when dataset is supposed to become public according to data policy  # noqa: E501

        :param date_of_publishing: The date_of_publishing of this Lifecycle.  # noqa: E501
        :type: datetime
        """

        self._date_of_publishing = date_of_publishing

    @property
    def published_on(self):
        """Gets the published_on of this Lifecycle.  # noqa: E501

        Day when dataset was published.  # noqa: E501

        :return: The published_on of this Lifecycle.  # noqa: E501
        :rtype: datetime
        """
        return self._published_on

    @published_on.setter
    def published_on(self, published_on):
        """Sets the published_on of this Lifecycle.

        Day when dataset was published.  # noqa: E501

        :param published_on: The published_on of this Lifecycle.  # noqa: E501
        :type: datetime
        """

        self._published_on = published_on

    @property
    def is_on_central_disk(self):
        """Gets the is_on_central_disk of this Lifecycle.  # noqa: E501

        Flag which is true, if full dataset is available on central fileserver. If false data needs to be copied from decentral storage place to  a cache server before the ingest. This information needs to be transferred to the archive system at archive time  # noqa: E501

        :return: The is_on_central_disk of this Lifecycle.  # noqa: E501
        :rtype: bool
        """
        return self._is_on_central_disk

    @is_on_central_disk.setter
    def is_on_central_disk(self, is_on_central_disk):
        """Sets the is_on_central_disk of this Lifecycle.

        Flag which is true, if full dataset is available on central fileserver. If false data needs to be copied from decentral storage place to  a cache server before the ingest. This information needs to be transferred to the archive system at archive time  # noqa: E501

        :param is_on_central_disk: The is_on_central_disk of this Lifecycle.  # noqa: E501
        :type: bool
        """

        self._is_on_central_disk = is_on_central_disk

    @property
    def archive_status_message(self):
        """Gets the archive_status_message of this Lifecycle.  # noqa: E501

        Short string defining current status of Dataset with respect to storage on disk/tape.  # noqa: E501

        :return: The archive_status_message of this Lifecycle.  # noqa: E501
        :rtype: str
        """
        return self._archive_status_message

    @archive_status_message.setter
    def archive_status_message(self, archive_status_message):
        """Sets the archive_status_message of this Lifecycle.

        Short string defining current status of Dataset with respect to storage on disk/tape.  # noqa: E501

        :param archive_status_message: The archive_status_message of this Lifecycle.  # noqa: E501
        :type: str
        """

        self._archive_status_message = archive_status_message

    @property
    def retrieve_status_message(self):
        """Gets the retrieve_status_message of this Lifecycle.  # noqa: E501

        Latest message for this dataset concerning retrieve from archive system.  # noqa: E501

        :return: The retrieve_status_message of this Lifecycle.  # noqa: E501
        :rtype: str
        """
        return self._retrieve_status_message

    @retrieve_status_message.setter
    def retrieve_status_message(self, retrieve_status_message):
        """Sets the retrieve_status_message of this Lifecycle.

        Latest message for this dataset concerning retrieve from archive system.  # noqa: E501

        :param retrieve_status_message: The retrieve_status_message of this Lifecycle.  # noqa: E501
        :type: str
        """

        self._retrieve_status_message = retrieve_status_message

    @property
    def archive_return_message(self):
        """Gets the archive_return_message of this Lifecycle.  # noqa: E501

        Detailed status or error message returned by archive system when archiving this dataset.  # noqa: E501

        :return: The archive_return_message of this Lifecycle.  # noqa: E501
        :rtype: object
        """
        return self._archive_return_message

    @archive_return_message.setter
    def archive_return_message(self, archive_return_message):
        """Sets the archive_return_message of this Lifecycle.

        Detailed status or error message returned by archive system when archiving this dataset.  # noqa: E501

        :param archive_return_message: The archive_return_message of this Lifecycle.  # noqa: E501
        :type: object
        """

        self._archive_return_message = archive_return_message

    @property
    def retrieve_return_message(self):
        """Gets the retrieve_return_message of this Lifecycle.  # noqa: E501

        Detailed status or error message returned by archive system when retrieving this dataset.  # noqa: E501

        :return: The retrieve_return_message of this Lifecycle.  # noqa: E501
        :rtype: object
        """
        return self._retrieve_return_message

    @retrieve_return_message.setter
    def retrieve_return_message(self, retrieve_return_message):
        """Sets the retrieve_return_message of this Lifecycle.

        Detailed status or error message returned by archive system when retrieving this dataset.  # noqa: E501

        :param retrieve_return_message: The retrieve_return_message of this Lifecycle.  # noqa: E501
        :type: object
        """

        self._retrieve_return_message = retrieve_return_message

    @property
    def exported_to(self):
        """Gets the exported_to of this Lifecycle.  # noqa: E501

        Location of the last export destination.  # noqa: E501

        :return: The exported_to of this Lifecycle.  # noqa: E501
        :rtype: str
        """
        return self._exported_to

    @exported_to.setter
    def exported_to(self, exported_to):
        """Sets the exported_to of this Lifecycle.

        Location of the last export destination.  # noqa: E501

        :param exported_to: The exported_to of this Lifecycle.  # noqa: E501
        :type: str
        """

        self._exported_to = exported_to

    @property
    def retrieve_integrity_check(self):
        """Gets the retrieve_integrity_check of this Lifecycle.  # noqa: E501

        Set to true when checksum tests after retrieve of datasets were successful  # noqa: E501

        :return: The retrieve_integrity_check of this Lifecycle.  # noqa: E501
        :rtype: bool
        """
        return self._retrieve_integrity_check

    @retrieve_integrity_check.setter
    def retrieve_integrity_check(self, retrieve_integrity_check):
        """Sets the retrieve_integrity_check of this Lifecycle.

        Set to true when checksum tests after retrieve of datasets were successful  # noqa: E501

        :param retrieve_integrity_check: The retrieve_integrity_check of this Lifecycle.  # noqa: E501
        :type: bool
        """

        self._retrieve_integrity_check = retrieve_integrity_check

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lifecycle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Lifecycle):
            return True

        return self.to_dict() != other.to_dict()
