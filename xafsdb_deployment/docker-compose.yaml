services:

  reverse-proxy:
    image: traefik:2.5
    command: --api.insecure=true --providers.docker=true --entrypoints.web.address=:80
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      
  mongodb:
    image: bitnami/mongodb:4.2
    environment:
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
    volumes:
      - "/srv/mongodb:/bitnami/mongodb"     # check that is mount exists on local filesystem

  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - PG_DATA:/var/lib/postgresql/data

  scicat:
    image: ghcr.io/scicatproject/backend-next:latest
    depends_on:
      - mongodb
    labels:
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`, `/auth`, `/explorer`)"
      - "traefik.http.routers.backend.entrypoints=web"

  
  xafsdb:
    image: registry.hzdr.de/daphne4nfdi/xafsdb:latest
    command: sh -c "python manage.py migrate && python manage.py collectstatic --no-input && uvicorn --host 0.0.0.0 webserver.asgi:application"
    depends_on:
      - scicat
      - db
    labels:
      - "traefik.http.routers.xafsdb.rule=PathPrefix(`/`)"
      - "traefik.http.routers.xafsdb.entrypoints=web"
    environment:
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
     
  mongo-express:
    image: mongo-express
    environment:
        - ME_CONFIG_MONGODB_SERVER=${ME_CONFIG_MONGODB_SERVER}
        - ME_CONFIG_MONGODB_PORT=${ME_CONFIG_MONGODB_PORT}
        - ME_CONFIG_MONGODB_ENABLE_ADMIN=${ME_CONFIG_MONGODB_ENABLE_ADMIN}
        - ME_CONFIG_SITE_BASEURL=${ME_CONFIG_SITE_BASEURL}
        - "ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}"
        - "ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}"
    depends_on:
        - mongodb
    labels:
       - traefik.http.routers.mongo-express.rule=PathPrefix(`/mongodb`)
       - traefik.http.services.mongo-express.loadbalancer.server.port=8081
       - "traefik.http.routers.mongo-express.middlewares=auth"
       - "traefik.http.middlewares.auth.basicauth.users=admin:$$2a$$12$$vyTh8.zQ85OygVq1q4cX4u50QJXfW1tSJn/dr2zuQFzAW6F31VUtq"

  # https://github.com/tiredofit/docker-db-backup#configuration
  db-backup-pg:
    container_name: db-backup-pg
    image: tiredofit/db-backup
    volumes:
      - ./backups-pg:/backup
    environment:
      # - DEBUG_MODE=TRUE
      - DB_TYPE=pgsql
      - DB_HOST=db
      - DB_NAME=${POSTGRES_USER}
      - DB_USER=${POSTGRES_PASSWORD}
      - DB_PASS=${POSTGRES_DB}
      - DB_DUMP_FREQ=1            # backup every minute
      # - DB_DUMP_BEGIN=0000      # backup starts immediately
      - DB_CLEANUP_TIME=5         # clean backups they are older than 5 minute
      - CHECKSUM=SHA1
      - COMPRESSION=GZ
      - SPLIT_DB=FALSE
      - CONTAINER_ENABLE_MONITORING=FALSE
    restart: always

  db-backup-mongo:
    container_name: db-backup-mongo
    image: tiredofit/db-backup
    volumes:
      - ./backups-mongo:/backup
    environment:
      # - DEBUG_MODE=TRUE
      - DB_TYPE=mongo
      - DB_HOST=db
      - DB_NAME=${MONGODB_DATABASE}
      - DB_USER=${MONGODB_USERNAME}
      - DB_PASS=${MONGODB_PASSWORD}
      - DB_DUMP_FREQ=1            # backup every minute | for 1 day you can change DB_DUMP_FREQ=1440
      # - DB_DUMP_BEGIN=0000      # backup starts immediately
      - DB_CLEANUP_TIME=5         # clean backups they are older than 5 minute
      - CHECKSUM=SHA1
      - COMPRESSION=GZ
      - SPLIT_DB=FALSE
      - CONTAINER_ENABLE_MONITORING=FALSE
    restart: always

volumes:
  PG_DATA: