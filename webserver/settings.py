"""
Django settings for webserver project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path

import environ

env = environ.Env()
environ.Env.read_env()

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# while giving remote access to the localhost via "pagekite.py 8001 xafsdb.pagekite.me"
# uncomment following and change "test/" in urls.py to "" and "" to "test/":
# ALLOWED_HOSTS = ["xafsdb.pagekite.me"]
ALLOWED_HOSTS = ["*"]

URL_REST_API = "http://127.0.0.1:8000"

CONTEXT = {
    "url": "http://127.0.0.1:8001",
}


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "xafsdb_web",
    "rest_framework",
    "drf_yasg",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    # "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    # "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

#STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

ROOT_URLCONF = "webserver.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "webserver.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("DB_NAME", "xafsdb_pg"),
        "USER": env("DB_USER", "postgres"),
        "PASSWORD": env("DB_PASSWORD", "root"),
        "HOST": env("DB_HOST", "localhost"),
        "PORT": env("DB_PORT", ""),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# gmail_send/settings.py
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = "default from email"


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGES = [
    ("en", "English"),
    ("de", "German"),
]

LANGUAGE_CODE = LANGUAGES[0][0]

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_ROOT = os.path.join("landing", "static")
STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# S3 Object Storage
# AWS_ACCESS_KEY_ID = config(AMAZON_ACCESS_KEY_ID)  # For Digital Ocean Set region same as to your Digital Ocean Access Key
# AWS_SECRET_ACCESS_KEY = config(AMAZON_SECRET_ACCESS_KEY)  # For Digital Ocean Set region same as to your Digital Ocean Secret Key
# AWS_STORAGE_BUCKET_NAME = config(AMAZON_STORAGE_BUCKET_NAME)
# AWS_REGION = config("AWS_REGION", "eu-central-1")  # For Digital Ocean Set region same as to your Digital Ocean region (such as nyc3 or sfo2)
# AWS_S3_REGION_NAME = config("AWS_REGION", "eu-central-1")
AWS_ACCESS_KEY_ID = env(
    "AMAZON_ACCESS_KEY_ID"
)  # For Digital Ocean Set region same as to your Digital Ocean Access Key
AWS_SECRET_ACCESS_KEY = env(
    "AMAZON_SECRET_ACCESS_KEY"
)  # For Digital Ocean Set region same as to your Digital Ocean Secret Key
AWS_STORAGE_BUCKET_NAME = env("AMAZON_STORAGE_BUCKET_NAME")
# AWS_REGION = ("eu-central-1")  # For Digital Ocean Set region same as to your Digital Ocean region (such as nyc3 or sfo2)
AWS_S3_REGION_NAME = "eu-central-1"
AWS_S3_ENDPOINT_URL = f"https://s3.{AWS_S3_REGION_NAME}.amazonaws.com"
# For Digital Ocean Uncomment below line and comment above line.
# AWS_S3_ENDPOINT_URL = f"https://${AWS_S3_REGION_NAME}.digitaloceanspaces.com"
AWS_S3_USE_SSL = True
AWS_QUERYSTRING_AUTH = True
AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
AWS_LOCATION = "static"
MEDIA_LOCATION = "media"
DEFAULT_FILE_STORAGE = "webserver.backends.PublicMediaStorage"
#STATICFILES_STORAGE = "webserver.backends.StaticsMediaStorage"
#STATIC_URL = f"https://{AWS_S3_ENDPOINT_URL}/{AWS_LOCATION}/"
MEDIA_URL = f"https://{AWS_S3_ENDPOINT_URL}/{MEDIA_LOCATION}/"
